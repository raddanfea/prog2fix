<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
	<title>l334d1c4</title>
        <para>
	<programlisting>
        <![CDATA[
import java.io.*;
import java.util.*;

public class Main
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String OUP = "placeholder";
        while(OUP.charAt(0) != 'Q') {
            OUP = sc.nextLine();
            for(int i = 0; i < OUP.length(); i++) {
                switch (OUP.charAt(i)) {
                    case 'e':
                        OUP = OUP.substring(0, i) + '3' + OUP.substring(i + 1); break;
                    case 'E':
                        OUP = OUP.substring(0, i) + '3' + OUP.substring(i + 1); break;
                    case 'a':
                        OUP = OUP.substring(0, i) + '4' + OUP.substring(i + 1); break;
                    case 'A':
                        OUP = OUP.substring(0, i) + '4' + OUP.substring(i + 1); break;
                    case 'o':
                        OUP = OUP.substring(0, i) + '0' + OUP.substring(i + 1); break;
                    case 'O':
                        OUP = OUP.substring(0, i) + '0' + OUP.substring(i + 1); break;
                }
            }
            System.out.println(OUP);
        }
    }
}
	]]>
        </programlisting>
	</para>
	<para>
	Az alábbi l33t cypher Javában fut és sorokat fogad be, melyeket lefordít l33t nyelvre.
	</para>
	<para>
	A sort egy stringbe menti majd azt karakterenként átnézi lecserélendő karakterekért. Amikor cserélendő karaktert talál, a stinget kettévágja, a jelenlegi karaktert egy annak megfelelő l33t karakterre cseréli, majd az előtte és autána lévő résszel egyesíti azt.
	</para>
	<para>
	Amennyiben Q karaktert magában írjuk, a program kilép.
	</para>
	
    </section>
	<section>
        <title>Perceptron osztály</title>
	<para>
A perceptron egy olyan modell, mely az emberi agyat próbálja szimulálni, és képes felismerni, vagy megtagadni egy adott bemenetet. A szükséges adatok megadása után (tanítás) bizonyos hibaszázalékkal képes lesz egy saját "véleményt", jobb szóval predikciót mondani egy addig még nem látott bemenetre.
	</para>
	<para>
A perceptron az egyik legegyszerűbb előrecsatolt neurális hálózat. Létrehozzuk a p nevű Perceptron osztály objektumot, a konstruktorának segítségével. Ez a perceptron 3 rétegű és egy kimeneti csomópontból áll, az egyes rétegek size változó értéke, 256, 1 szálakból állnak. Majd a számításhoz szükséges mátrixba mozgatjuk az adatokat, melyetket a heapen tárolunk, majd ezeket a helyeket felszabadítjuk a delete függvény segítségével manuálisan. A double típusú változóba mentjük a perceptron számítás eredményét, amit megjelenítünk szabványos kimeneten.
	</para>	
	<para>
		<programlisting language = "C++">
          <![CDATA[ 	 
	#include <iostream>
#include "png++/png.hpp"
#include "mlp.hpp"
using namespace std;
using namespace png;
int main ( int argc, char *argv[] )
{
image <rgb_pixel> png_image (argv[1]);
int size = png_image.get_width() * png_image.get_height();
Perceptron* p = new Perceptron(3, size, 256, 1);
double* image = new double[size];
for (int i{0}; i < png_image.get_width(); i++)
for (int j{0}; j < png_image.get_height(); j++)
image[i * png_image.get_width() + j] = png_image[i][j].red;
double value = (*p)(image);
cout <<" "<< value << endl;
delete p;
delete [] image;
}
        ]]>
        </programlisting>
	</para>
	<para>
		A perceptronok a neurális hálók fő építőelemei és manapság egyre több alkalmazási területen találkozhat velük egy programozó. Ilyen algoritmusokkal egészen pontosan lehet mintafelismerést végezni képekben, szövegekben, hangfájlokban, stb.
	</para>
	</section>
	<section>
	<title>Encoding</title>
	<para>
		Sok kezdő és idegen nyelveket nem jól ismerő programozó kezdi el a programjait a saját nyelvén írni, annotálni. Ám ezt sok fordító és IDE nem támogatja. Emiatt nem csak ajánlott, de egyenesen szükséges az, hogy a programjainkat angolul írjuk, angol változó- és függvényneveket, kifejezéseket és kommenteket, a megfelelő kompatibilitás biztosításának érdekében. 
	</para>
	<para>
		De mit tehetünk abban az esetben, ha nem vagyunk hajlandók limitálni magunkat a szabványos, programozásban használt karakterhalmazhoz?
	</para>
	<para>
		Először is: Ne csináljunk ilyet!
	</para>
	<para>
		Másodszor: Lehetőségünk van megadni praméterként a szövegkódolást a fordítónak. Ez a következő paranccsal lehetséges UTF-8 kódolás esetén:
	</para>
	<programlisting>
		<![CDATA[
			javac -encoding utf-8 <fájlnév>
        ]]>
	</programlisting>
	<para>
		Itt az utf-8 helyett természetesen a saját fájlunk kódolási módszerét kell beírnunk, amit a következő paranccsal tudhatunk meg: 
	</para>
	<programlisting>
		<![CDATA[
			file <fájlnév>
        ]]>
	</programlisting>
	<para>
		Ez a parancs ki fogja írni az adott fájllal kapcsolatos tudnivalókat, köztük a szöveges fájlok karakterkódolását.
	</para>
	<para>
		Ha lefordítottuk a programunkat, nincs más dolgunk, mint futtatni, itt már nem szabad komplikációnak lennie, hiszen ez már egy bináris fájl lesz, melyben nem maradnak meg a változónevek, kommentek.
	</para>
</section>
<section>
	<title>FullScreen</title>
	<para>
		Egy program írásakor el kell döntenünk, hogy milyen módon fogjuk a kimenetet megjeleníteni a felhasználó számára. Ezt több szempont alapján tehetjük meg: 
	</para>
	<para>
		Ha annyi a cél, hogy egy kimeneti értéket, például egy számot kiírjunk, vagy csak saját használatra írunk egy programot minél egyszerűbben, a legcélszerűbb egy terminálban futó programot írni.
	</para>
	<para>
		Ha el szeretnénk adni a programunkat, talán az a legjobb, ha egy grafikus felületet készíteni az egyszerű használat és vonzó kinézet miatt.
	</para>
	<para>
		Ha egy grafikailag szofisztikált program írása a cél, mit egy képmegjelenítő, vagy egy játék, talán a legjobb ötlet egy teljes képernyős program készítése.
	</para>
	<para>
		Az előző feladatban bemutatott java mandelbrot-implementáció kimenete egy képfájl, amit megnyitunk egy ablakbban, így a legelegánsabb megoldás az, ha egy teljes képernyős ablakban jelenítjük meg azt. 
	</para>
	<para>
		Ha a MandelbrotHalmaz.java fájl 60. sorától beillesztjük a következő 3 sort, teljes képernyős kimenetet fogunk kapni.
	</para>
	<programlisting>
		<![CDATA[
			this.setUndecorated(true);
			this.setVisible(false);
			GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(this);
		]]>
	</programlisting>
</section>
</chapter>
