<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>

    <section>
        <title>PortScan</title>
        <para>
            <emphasis>
                    Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
                    https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Rádi Dániel
            </emphasis>
        </para>
        <para>A forráskód egy for ciklus alatt megpróbálkozik minden lehetséges portra csatlakozni. Amennyiben ez sikerül, a port nyitott, amenyiben a csatlakozás hibát ad vissza, a port zárt vagy nem létezik. Amennyiben más kód is fut hibakezelőnk alatt amely hibába ütközik, akkor is zártnak tekinti a függvény-ciklus a portot (jelen esetben ez nem fordul elő).
	</para>
        <programlisting language="java">
            <![CDATA[
            public static void main(String[] args) {
        
                for(int i=0; i<1024; ++i)
                    
                    try {
                        
                        java.net.Socket socket = new java.net.Socket(args[0], i);
                        
                        System.out.println(i + " figyeli");
                        
                        socket.close();
                        
                    } catch (Exception e) {
                        
                        System.out.println(i + " nem figyeli");
                        
                    }
            }
            ]]>
        </programlisting>

        <para>Mivel normál esetben ilyet nem csinálunk, ez a hálózat támadásának tekinthető. Mivel minden minden egyes portot ellenőrzünk ez bruteforce támadásnak minősül, amelyet a legtöbb védelmi rendszer autómatikusan is észlel. Ezt a saját hálózatunkon kívül, engedély nélkül elvégezni nem ajánlott és legtöbb esetben illegális.
	</para>
    </section>
    <section>
        <title>AOP</title>
        <para>
            <emphasis>
                    Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
                    feladat volt korábban.)
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Rádi Dániel
            </emphasis>
        </para>
        <para>A feladathoz telepítenünk kell az aspectj-t. Ubuntun ezt így tudjuk megcsinálni:
	</para>
        <programlisting language="java">
            <![CDATA[
sudo apt install aspectj
ajc LZWBinFa.java Aspect.aj]]>
        </programlisting>

        <para>A joint egy olyan pont a programban amikor valamilyen folyamat lefut. Például, egy metódus meghívódik vagy egy kivételt throwolunk,inicializálunk egy objektumot, stb. A pointcutnak van jobb és bal oldala, ezeket kettőspont választja el. Bal oldalon a pointcut neve és paraméterei állnak ahol az elérhető adatokhoz férhetünk hozzá ha lefut a metódus. A jobboldalt maga a pointcut szerepel, például a call vagy az execution. Itt adjuk meg, hogy mire utal a pointcut.
	</para>
        <para>
A before, after és around parancsokkal adjuk meg hogy a metódus hívása előtt, után, közben vagy helyette fusson le. A within adja meg melyik osztályt szeretnénk használni, a target a meghívó java object, az argumentumok pedig azok az értékek amiket használni szeretnénk.
</para>
        <programlisting language="java">
            <![CDATA[
private long egy = 0;
private long null = 0;
pointcut pushback(): execution(public void push_back(char));
before(char ch): pushback() && args(ch) {

    if (ch == '1') {
        egy++;
    } else {
        null++;
    }
}
pointcut main(): execution(public static void main(String[]));
after(): main() {
    System.out.println("Egyesek száma: " + egy);
    System.out.println("Nullások száma: " + null);
}]]>
        </programlisting>
        <para>
A fenti kód az egyesek és nullások összeszámlálására készült. Valahányszor lefut a push_back(char), előtte megnézzük hogy a char milyen karakter és növeljük az adott értékhez tartozó darabszámunkat. Végül, ,mMiután lefut a programunkban a main függvény, kiiratjuk a darabszámokat a termilálba. 
</para>
    </section>


    <section>
        <title>Android játék: MindMark</title>
        <para>
            <emphasis>
                    Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Takács Viktor
            </emphasis>
        </para>
        <para>
		Ebben a feladatban egy korábbi, de nem túl régi projektemet mutatom be, mely MindMark néven talán az olvasáskor már meg is található a Google Play store-on. 
	</para>
        <para>
		Az alkalmazás valójában csak akkor tekinthető játéknak, ha a szó tágabb jelentését vesszük, de egészen jól el lehet szórakozni vele, emiatt úgy döntöttem, hogy belefér a kategóriába. Teljes forráskódot nem fogok linkelni, de fontosabb, vagy érdekesebb részleteket mutatok belőle.
	</para>
        <para>
		A játék (nevezzük annak) felépítése a következő: Van egy dobozunk a képernyő felső részén, ami két másodpercenként véletlenszerűen piros, vagy zöld színre vált, valamint a képernyő alján két gombunk, melyek közül az egyik piros, a másik zöld. Az, hogy melyik milyen színű, az szintén véletlenszerűen változik két másodpercenként. A cél az, hogy azt a gombot nyomjuk meg, amely színe megegyezik a felső doboz színével. 10 kör után a reakcióidőnk összeadódik, ez lesz az eredményünk, mely elmentődik egy fájlba, hogy később össze tudjuk hasonlítani az előző eredményeinkkel. Ezen a játékmódon kívül van egy végtelen mód is, melyben a játékosnak egyre kevesebb ideje van a reagálásra. Itt nem az összes reakcióidő adódik össze, hanem a helyes gombnyomások száma. Itt akkor van vége a játéknak, ha rossz gombot nyom a játékos.
	</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="lauda/mindmark.png" width="33%"></imagedata>
            </imageobject>
        </mediaobject>
        <para>
            Az alkalmazás Android Studio-ban íródott, melynek sok beépített funkcióját használtam. Fontos elemei a játéknak az alsó két gomb, melynek a működése a következő: 
        </para>
        <para>
            <programlisting>
                <![CDATA[
public void addTouchListenerOnLeftButton() {
    left_button.setOnTouchListener(new View.OnTouchListener() {
        @Override
        public boolean onTouch(View v, MotionEvent event) {
            switch(event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    //if the game is on and the user hasn't pressed the button in that round
                    if ((gameIsRunning == true) && (clickHappened == false)) {
                        timeAtButtonPress = System.currentTimeMillis();

                        if (((leftButtonIsRed == true) && (screenIsRed == true)) || (leftButtonIsRed == false) && (screenIsRed == false)) {
                            vibrate(vibrationLength);
                            time_elapsed = timeAtButtonPress - timeAtTick;
                            time_elapsed_string = Long.toString(time_elapsed);
                            main_screen.setText("Correct!\n" + time_elapsed_string + " ms");
                            clickHappened = true;
                            array.add(time_elapsed);
                            correctCounter++;
                        } else {
                            vibrate(longVibration);
                            main_screen.setText("Incorrect!\n+ " + timeInterval + " ms");
                            time_elapsed = timeInterval;
                            clickHappened = true;
                            array.add(time_elapsed);
                        }

                        //set the button color to a darker shade while it's being pressed - just for some responsive feedback
                        if (leftButtonIsRed == true) {
                            left_button.setBackgroundColor(0xFFBB0000);
                        } else {

                            left_button.setBackgroundColor(0xFF00BB00);
                        }
                    break;
                    }
                case MotionEvent.ACTION_UP:
                    if(gameIsRunning == true) {
                        if (leftButtonIsRed == true) {
                            left_button.setBackgroundColor(0xFFAA0000);
                        } else {

                            left_button.setBackgroundColor(0xFF00AA00);
                        }
                    }
                    break;
                case MotionEvent.ACTION_CANCEL:
                    break;
            }
            return false;
        }
    });
}
                ]]>
            </programlisting>
        </para>
        <para>
            A fenti textview-ra kiírt statisztika számolását nem beépített függvényekkel oldottam meg, valamiért szeretem megnehezíteni a saját dolgomat, így pl. a szórást is magamnak implementáltam.
        </para>
        <para>
            <programlisting>
                <![CDATA[
private void getStats()
{
    for(int i = 0; i < array.size(); i++)
    {
        arrayTotal += array.get(i);

        if(array.get(i) > arrayMax)
        {
            arrayMax = array.get(i);
        }
        if(array.get(i) < arrayMin)
        {
            arrayMin = array.get(i);
        }
    }
    arrayDeviation = deviation(array);
    arrayAvg = arrayTotal / roundsPlayed;
}
                ]]>
            </programlisting>
        </para>
        <para>
            Az, hogy körönként a képernyő és a gombok milyen színűek lesznek, egy random szám segítségével tudom megadni, amit felbontottam négy intervallumra, és attól függően lesznek a színek adottak, hogy melyik intervallumba esik a random szám 1 és 0 között. Ezt biztosan meg lehetett volna másképp is oldani, de ez tűnt könnyen átláthatónak és könnyen átírhatónak egy későbbi továbbfejlesztés esetén.
        </para>
        <para>
            <programlisting>
                <![CDATA[
private void setColors() {

    double random = Math.random();
    main_screen.setText("Click!");

    if (random > 0.5) {
        main_screen.setBackgroundColor(red);
        screenIsRed = true;
    } else {
        main_screen.setBackgroundColor(green);
        screenIsRed = false;
    }

    if (random < 0.25 || (random >= 0.5) && (random < 0.75)) {
        left_button.setBackgroundColor(darkRed);
        right_button.setBackgroundColor(darkGreen);
        leftButtonIsRed = true;
    } else if ((random >= 0.25) && (random < 0.5) || (random >= 0.75)) {
        left_button.setBackgroundColor(darkGreen);
        right_button.setBackgroundColor(darkRed);
        leftButtonIsRed = false;
    }
}
                ]]>
            </programlisting>
        </para>
        <para>
            A háttérszín változására egy saját RGB api-t írtam, mely ezredmásodpercenként változtatja a háttérszínt kis mértékben, ezzel azt a hatást elérve, hogy átmenetes a színskála. Ebben a programrészben több konstruktort adok meg, melyeknek más a bemeneti típus-listája, így az alapján el tudja dönteni, hogy melyik konstruktornak kell életbelépnie. Még az api nem teljes, nem minden objektumtípust támogat, de nem nehéz új objektumtípusokhoz írni bele konstruktorokat, így tervezem a közeljövőben befejezni. A következő kódcsipet az api színváltásért felelő részét mutatja be: 
        </para>
        <para>
            <programlisting>
                <![CDATA[
public void relativeLayoutColorChange() {
    final Runnable runnable = new Runnable() {
        @Override
        public void run() {
            if(!stop) {

                if ((red > 0) && (green < 255) && (blue == 0)) {
                    redMinus();
                } else if ((red == 0) && (green > 0) && (blue < 255)) {
                    greenMinus();
                } else if ((red < 255) && (green == 0) && (blue > 0)) {
                    blueMinus();
                }

                color = 0xBB000000 + 0x10000 * red + 0x100 * green + blue;

                relativeLayout.setBackgroundColor(color);

                handler.postDelayed(this, speed);
            }
        }
    };
                ]]>
            </programlisting>
        </para>
        <para>
            <programlisting>
                <![CDATA[
private void redMinus() {
    red--;
    green++;
}
                ]]>
            </programlisting>
        </para>
        <para>
            <programlisting>
                <![CDATA[
private void greenMinus() {
    green--;
    blue++;
}
                ]]>
            </programlisting>
        </para>
        <para>
            <programlisting>
                <![CDATA[
private void blueMinus() {
    blue--;
    red++;
}
                ]]>
            </programlisting>
        </para>
    </section>


    <section>
        <title>jUnit</title>
        <para>
            <emphasis>
                    A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
                    poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
                    volt korábban).
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Takács Viktor
            </emphasis>
        </para>
        <para>
		A jUnit egy java kódokhoz írt tesztelőprogram, mellyel a futás bizonyos pontjainál tudunk kimenteni és ellenőrizni adatokat. Ez egy debugoláshoz kiváló módszer, hiszen ha nem tudjuk, melyik függvényünk az, ami elrontja a végső kimenetet, egyszerűen kimentjük az összesnek az eredményét és összehasonlítjuk azzal, aminek ki kéne jönnie. A jUnit az Apache Maven keretrendszert használja, így könnyen futtatható a legtöbb IDE-ben, és nagyobb projektekben is könnyen deploy-olható. 
	</para>
        <para>
		A feladat során a binfa egy már korábban ellenőrzött, papíron kiszámolt végeredményét kell összehasonlítanunk a program futása során kapott outputtal. 
    </para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="lauda/junit.png" width="100%"></imagedata>
        </imageobject>
    </mediaobject>
    <para>
		A tesztprogram írásakor figyelembe kell venni, hogy egy különböző fán kell majd végrehajtanunk a tesztet, mint amiről az outputot olvassuk, hiszen lehet, hogy egy olyan függvényt használunk, ami "elrontja" az előző függvény általi visszatérési értéket, ha ezzel számolnánk a tesztben, akkor elromlana az is és false positive eredményt kapnánk. Az assertEquals(inputs) függvénnyel azt tudjuk megnézni, hogy a számolt eredmény (függvénnyel vagy expliciten megadva) megegyezik-e a programunk kimenetével. Ha igen, akkor lefut a többi kód is, így egy egyszerű println() függvénnyel ki tudjuk írni, hogy megegyeznek-e az értékek.
	</para>
    </section>


</chapter>
