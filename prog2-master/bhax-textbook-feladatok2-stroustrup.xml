<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustup!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>
    <section>
        <title>Objektumok másolása és mozgatása c++11-ben + esszé</title>
        <para>
            <emphasis>
                    Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató
                    szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra! + Írj egy 1 oldalas bemutató esszé szöveget!
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Takács Viktor
            </emphasis>
        </para>
        <para>
            A c++ nyelv szerves részét képezik a mutatók. Ezek memóriacímet tartalmazó változók, melyek segítségével saját magunknak viszonylag alacsony szinten tudunk adatszerkezeteket definiálni. Ha olyan területen dolgozunk, melyen fontos a sebesség és személyre szabhatóság, ezek használata valószínűleg elkerülhetetlen. Ám ennek ára van. Pointerekkel sokszor nehéz dolgozni, átlátni, a felépítését egy adott adatszerkezetnek. Ha mutatókra állítunk mutatókat, majd arra is egyet, esetleg belerakunk a programba egy pár referenciát is, hamar olyan összetettségű problémával fogunk találkozni, amit saját magunk is nehezen látunk át. Általában ha nem dolgozunk bonyolultabb adatszerkezetekkel, a mutatók használata nem nehéz, csupán kis gyakorlást igényel. Azonban egy fa, lista, vagy akár egy osztály implementálásakor exponenciálisan nőhet az átláthatóság nehézsége. A legtöbb magas szintű programozási nyelv manapság nem is engedi meg a mutatókkal való babrálást, helyette automatikusan végzi a memória allokálását és felszabadítását. Viszont ha nem akarunk, vagy nincs lehetőségünk egy előre elkészített API-val dolgozni, kénytelenek leszünk magunknak implementálni az adott probléma megoldásához szükséges erőforrásokat. 
        </para>
        <para>
            Ezekre vannak jól bevált módszerek, melyek alapján könnyebben tudjuk hibamentesen megoldani a problémát. Ilyenek a másoló és mozgató értékadás és  konstruktor. Ezekre a fogalmakra már láttunk példát az előző fejezetben, az LZWBinFa algorimus során. Itt az idő tehát, hogy részletesebben is megnézzük, hogy mi történik pontosan. 
        </para>
        <para>
        	Másoló konstruktor:
        </para>
        <programlisting>
            <![CDATA[
				LZWBinFa ( const LZWBinFa & regi )
				{
					std::cout << "LZWBinFa copy ctor" << std::endl;
					gyoker = masol ( regi.gyoker, regi.fa );
				}
	        ]]>
        </programlisting>
        <para>
        	Itt a konstruktor bemeneti értékként megkapja a régi fa objektumot, a masol() függvénnyel lemásolja annak tartalmát, majd ráállít egy mutatót, ami a gyökérmutatója lesz az új fának. Fontos megemlíteni, hogy konstans értéket kap a konstruktor, ezzel biztosítjuk, hogy az eredeti fa nem változik.
        </para>
        <para>
        	Mozgató konstruktor: 
        </para>
        <programlisting>
            <![CDATA[
		LZWBinFa ( LZWBinFa && regi )
			{
				std::cout << "LZWBinFa move ctor" << std::endl;
				gyoker = nullptr;
				*this = std::move ( regi );
			}
	        ]]>
        </programlisting>
        <para>
        	Ez a kódcsipet azt meséli el, hogy lenullázzuk az eredeti fa értékét, majd az újonnan létrehozott BinFa típusú példány gyökerének odaadjuk a régi fa szerkezetét. Ez az std::move() függvénnyel történik, mely jobbértékké alakítja a bemenetként kapott értéket, ezzel megteremtve a lehetőséget, hogy egy egyenlőségjel jobb oldalára írjuk azt.
        </para>
        <para>
        	Másoló értékadás: 
        </para>
        <programlisting>
            <![CDATA[
	    LZWBinFa & operator= ( const LZWBinFa & regi )
	    	{
				std::cout << "LZWBinFa copy assign" << std::endl;
				Csomopont * ujgyoker = masol( regi.gyoker, regi.fa );
				szabadit (gyoker);
				gyoker = ujgyoker;
				return *this;
		    }
	        ]]>
        </programlisting>
        <para>
        	Itt egy "operator overloading" varázslat történik, mellyel az egyenlőségjel jelentését írjuk felül. Létrehozunk egy új Csomopont példányra mutató pointert ujgyoker néven, majd rámásoljuk a bal oldali értékként kapott fa szerkezetét. Eltöröljük a régi gyökérből induló fát, majd a régi mutatónak (itt: gyoker) odaadjuk a az új gyökér értékét. Ezután visszaadunk egy erre a fára mutató pointert, ami mutatni fog az imént lemásolt fa gyökerére, ez az érték fog odaadódni az egyenlőség al oldalán levő változónak.
        </para>
        <para>
        	Mozgató értékadás:
        </para>
        <programlisting>
            <![CDATA[
		LZWBinFa & operator= ( LZWBinFa && regi )
			{
				std::cout << "LZWBinFa move assign" << std::endl;
				std::swap ( gyoker, regi.gyoker );
				std::swap ( fa, regi.fa );
        		return *this;
			}
	        ]]>
        </programlisting>
        <para>
        	Ezt talán a legegyszerűbb átlátni a négy konstruktor közül: Itt is az egyenlőségjelet írjuk felül, de ebben az esetben a jobb oldali értéket az std::move() függvény keretein belül kell megadni. Csupán annyi történik, hogy az új fa és a régi fa gyökerét, majd adataikat kicseréljük egymással. Ezzel azt érjük el, hogy az eredeti fára mutató pointer ki lesz nullázva, hiszen null értékű pointerrel cseréltük ki, az új pointer értéke pedig a fa gyökere lesz. Itt is visszaadunk egy erre az objektumra mutató pointert, ami jobbértékként az eredeti mutató helyén lesz.
        </para>
        <para>
        	Ezzel a négy konstrukcióval kisebb módosításokkal bármilyen adatszerkezetet biztonságosan és gyorsan fogunk tudni mozgatni és duplikálni, ha szükség lesz rá, hiszen csak pointereket pakolunk ide-oda.
        </para>
    </section>
    <section>
        <title>RSA törés</title>
        <para>
            <emphasis>
                    Készítsünk betű gyakoriság alapú törést egy hibásan implementált RSA kódoló:
                    https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf (71-73 fólia) által
                    készített titkos szövegen.
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Rádi Dániel
            </emphasis>
        </para>
        <para>
            <programlisting>
                <![CDATA[
	import java.util.Scanner;
	public class RSA {
	public static void main(String[] args) {
        KulcsPar jSzereplo = new KulcsPar();
        String szoveg;
        Scanner sc = new Scanner(System.in);
        System.out.println("Adja meg a titkosítani kívánt szöveget: ");
        szoveg=sc.nextLine();
        byte[] buffer = szoveg.getBytes();
        java.math.BigInteger[] titkos = new java.math.BigInteger[buffer.length];
        for (int i = 0; i < titkos.length; ++i) {
            titkos[i] = new java.math.BigInteger(new byte[]{buffer[i]});
            titkos[i] = titkos[i].modPow(jSzereplo.e, jSzereplo.m);
        }
        for (java.math.BigInteger t : titkos) {
            System.out.print(t);
            System.out.println();
        }
        for (int i = 0; i < titkos.length; ++i) {
            titkos[i] = titkos[i].modPow(jSzereplo.d, jSzereplo.m);
            buffer[i] = titkos[i].byteValue();
        }
        System.out.println("\n" + new String(buffer));
    }
}
class KulcsPar {
    java.math.BigInteger d,e,m;
    public KulcsPar() {
        int meretBitekben = 700 * (int) (java.lang.Math.log((double) 10)
                / java.lang.Math.log((double) 2));
        java.math.BigInteger p = new java.math.BigInteger(meretBitekben, 100, new java.util.
                Random());
        java.math.BigInteger q = new java.math.BigInteger(meretBitekben, 100, new java.util.
                Random());
        m = p.multiply(q);
        java.math.BigInteger z = p.subtract(java.math.BigInteger.ONE).multiply(q.subtract(java.
                math.BigInteger.ONE));
        do {
            do {
                d = new java.math.BigInteger(meretBitekben, new java.util.Random());
            } while (d.equals(java.math.BigInteger.ONE));
        } while (!z.gcd(d).equals(java.math.BigInteger.ONE));
        e = d.modInverse(z);
    }
}
]]>
            </programlisting>
        </para>
        <para>
        Az RSA (Rivest – Shamir – Adleman) az egyik első nyilvános kulcsú kriptoszisztéma, amelyet széles körben használnak a biztonságos adatátvitelhez. Egy ilyen kriptoszisztémában a titkosítási kulcs nyilvános, és különbözik a titkosított (privát) titkosítási kulcsotól. Az RSA-ban ez az aszimmetria a két nagy prímszám szorzatának faktorizálásának gyakorlati nehézségén alapszik, a "faktoring probléma". 
	</para>
        <para>
        Az RSA betűszó Ron Rivest, Adi Shamir és Leonard Adleman vezetékneveinek kezdőbetűiből áll, akik elsőként 1977-ben jelentették be az algoritmust. Clifford Cocks, a brit hírszerző ügynökség kormányzati kommunikációs központjában (GCHQ) dolgozó angol matematikus. 1973-ban kifejlesztett egy megfelelő rendszert, de ezt csak 1997-en nyilvánosították.
	</para>
    </section>

    <section>
        <title>Változó argumentumszámú ctor</title>
        <para>
            <emphasis>
                    Készítsünk olyan példát, amely egy képet tesz az alábbi projekt Perceptron osztályának bemenetére
                    és a Perceptron ne egy értéket, hanem egy ugyanakkora méretű „képet” adjon vissza. (Lásd még a 4
                    hét/Perceptron osztály feladatot is.)
            </emphasis>
        </para>
        <para>
            <emphasis role="strong">
                Rádi Dániel, Takács Viktor
            </emphasis>
        </para>
        <para>
    Szinte minden modern programozási nyelv része az objektum-orientáltság. Ennek az elképesztően elterjedt paradigmának rengeteg ága, kritériuma és lehetősége van. Egy objektum létrehozása során például lefuttathatunk egy kódot, mely minden egyes objektumelem inicializálása során újra le fog futni. Annak érdekében, hogy egy adott elem többféleképpen is viselkedhessen, lehetőségünk van arra, hogy több konstruktort hozzunk létre. Ezek közül csak egy fog egy adott elem esetén lefutni, az, hogy melyik, azt az dönti el, hogy az adott bemenet melyik konstruktorra illeszkedik. Ezt a fogalmat hívjuk polimorfizmusnak, azaz többalakúságnak. A konstruktoraink különbözhetnek a bemenetek adattípusaiban, vagy azoknak a számában is. 
</para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100 %" fileref="stroustup/ctor.png" format="PNG" />
            </imageobject>
        </mediaobject>
        <para>
    Ezt a paradigmát már használtuk tavaly az LZWBinFa programunkban, ahol attól függően hívtuk meg a másoló vagy a mozgató konstruktort, hogy konstans értéket adtunk át neki, vagy nem. Én is ezt használom a saját fejlesztésű RGB api-mban, melynek azért kell több konstruktort írni, hogy tudja a setBackgroundColor() függvény, hogy milyen elemre kell alkalmaznia magát.
</para>
        <para>
            <programlisting>
                <![CDATA[
package com.mindmark;

import android.os.Handler;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class RGB {
    int red;
    int green;
    int blue;

    int color;
    int speed;

    Handler handler;
    Button button;
    TextView textView;
    LinearLayout linearLayout;
    RelativeLayout relativeLayout;

    private boolean stop = false;

    RGB(Button extButton, int cycleSpeed, int startingColor) {
        button = extButton;
        speed = cycleSpeed;

        red = (startingColor & 0xFF0000) >> 16;
        green = (startingColor & 0xFF00) >> 8;
        blue = startingColor & 0xFF;

        handler = new Handler();
        button.setBackgroundColor(startingColor);
        buttonColorChange();
    }

    RGB(TextView extTextView, int cycleSpeed, int startingColor) {
        textView = extTextView;
        speed = cycleSpeed;

        red = (startingColor & 0xFF0000) >> 16;
        green = (startingColor & 0xFF00) >> 8;
        blue = startingColor & 0xFF;

        handler = new Handler();

        textView.setBackgroundColor(startingColor);
        textViewColorChange();
    }

    RGB(LinearLayout extLinearLayout, int cycleSpeed, int startingColor) {
        linearLayout = extLinearLayout;
        speed = cycleSpeed;

        red = (startingColor & 0xFF0000) >> 16;
        green = (startingColor & 0xFF00) >> 8;
        blue = startingColor & 0xFF;

        handler = new Handler();

        linearLayout.setBackgroundColor(startingColor);
        linearLayoutColorChange();
    }

    RGB(RelativeLayout extRelativeLayout, int cycleSpeed, int startingColor) {
        relativeLayout = extRelativeLayout;
        speed = cycleSpeed;

        red = (startingColor & 0xFF0000) >> 16;
        green = (startingColor & 0xFF00) >> 8;
        blue = startingColor & 0xFF;

        handler = new Handler();

        relativeLayout.setBackgroundColor(startingColor);
        relativeLayoutColorChange();
    }


    public void buttonColorChange() {
            final Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    if(!stop) {

                        if ((red > 0) && (green < 255) && (blue == 0)) {
                            redMinus();
                        } else if ((red == 0) && (green > 0) && (blue < 255)) {
                            greenMinus();
                        } else if ((red < 255) && (green == 0) && (blue > 0)) {
                            blueMinus();
                        }

                        color = 0xFF000000 + 0x10000 * red + 0x100 * green + blue;

                        button.setBackgroundColor(color);

                        handler.postDelayed(this, speed);
                    }
                }
            };
            runnable.run();
        }

    public void textViewColorChange() {
        final Runnable runnable = new Runnable() {
            @Override
            public void run() {

                if(!stop) {

                    if ((red > 0) && (green < 255) && (blue == 0)) {
                        redMinus();
                    } else if ((red == 0) && (green > 0) && (blue < 255)) {
                        greenMinus();
                    } else if ((red < 255) && (green == 0) && (blue > 0)) {
                        blueMinus();
                    }

                    color = 0xBB000000 + 0x10000 * red + 0x100 * green + blue;

                    textView.setBackgroundColor(color);

                    handler.postDelayed(this, speed);
                }
            }
        };
        runnable.run();
    }

    public void linearLayoutColorChange() {
        final Runnable runnable = new Runnable() {
            @Override
            public void run() {
                if(!stop) {

                    if ((red > 0) && (green < 255) && (blue == 0)) {
                        redMinus();
                    } else if ((red == 0) && (green > 0) && (blue < 255)) {
                        greenMinus();
                    } else if ((red < 255) && (green == 0) && (blue > 0)) {
                        blueMinus();
                    }

                    color = 0xBB000000 + 0x10000 * red + 0x100 * green + blue;

                    linearLayout.setBackgroundColor(color);

                    handler.postDelayed(this, speed);
                }
            }
        };
        runnable.run();
    }

    public void relativeLayoutColorChange() {
        final Runnable runnable = new Runnable() {
            @Override
            public void run() {
                if(!stop) {

                    if ((red > 0) && (green < 255) && (blue == 0)) {
                        redMinus();
                    } else if ((red == 0) && (green > 0) && (blue < 255)) {
                        greenMinus();
                    } else if ((red < 255) && (green == 0) && (blue > 0)) {
                        blueMinus();
                    }

                    color = 0xBB000000 + 0x10000 * red + 0x100 * green + blue;

                    relativeLayout.setBackgroundColor(color);

                    handler.postDelayed(this, speed);
                }
            }
        };
        runnable.run();
    }

    private void redMinus() {
        red--;
        green++;
    }

    private void greenMinus() {
        green--;
        blue++;
    }

    private void blueMinus() {
        blue--;
        red++;
    }

    public void stop() {
        this.stop = true;
    }

}
        ]]>
            </programlisting>
        </para>
    </section>
</chapter>
