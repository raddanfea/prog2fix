<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

<section>
	<title>Gimp</title>
    <para>
        A GIMP (Gnu Image Manipulation Program) egy általános célú képszerkesztő program, ami a nevével ellentétben nem csak linux alapú operációs rendszerekre elérhető, hanem minden népszerű operációs rendszert futtató gépre letölthető. A program grafikus felületének segítségével minden feature-t elérhetünk, amit az kínál, de mint minden programozó jól tudja, a grafikus felületek akármilyen egyszerűen kezelhetők, intenzívebb munka során lassú tud lenni. Nem tudunk ciklusokkal végigjárni különböző elemeket, vagy saját metóduslistát alkalmazni több elemre egyszerre. Ráadásul egy grafikus felület hátterében is általában egy parancssori alkalmazás fut, ami parancsoknak feleltet meg bizonyos gombnyomásokat. Emiatt sok programban egy terminál-szerű ablak segítségével is ugyanazokat, vagy még több feature-t el lehet érni. Ilyen például a GIMP is, melynek nem saját programozási nyelve, csak saját "nyelvjárása" van, a Scheme, mely a Lisp nyelvnek a kiterjesztése. A nyelv egyik legjellegzetesebb tulajdonsága az, hogy a műveletek függvényszerűen, prefix alakban vannak írva, valamint az, hogy minden objektum listaként van reprezentálva. Magának a nyelvnek az alapötlete sok másik programozási nyelvvel különböző módon nem egy turing-gép, hanem az Alonso Church által feltalált lambda-kalkulus. Emiatt minden olyan programot meg lehet benne írni, amit bármilyen más nyelven írnánk.
        Itt egy pálda egy Scheme script-re, mely egy mandalát készít egy szövegből a megadott paraméterek alapján:
    </para>
    <programlisting>
        <![CDATA[
(define (elem x lista)
  (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )
    )
    (define (text-width text font fontsize)
    (let*
          (
                (text-width 1)
          )
          (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))      

          text-width
          )
    )
    (define (text-wh text font fontsize)
    (let*
          (
                (text-width 1)
                (text-height 1)
          )
          ;;;
          (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))      
          ;;; ved ki a lista 2. elemét
          (set! text-height (elem 2   (gimp-text-get-extents-fontname text fontsize PIXELS font)))      
          ;;;      
          
          (list text-width text-height)
          )
    )
    ;(text-width "alma" "Sans" 100)
    (define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
    (let*
          (
                (image (car (gimp-image-new width height 0)))
                (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
                (textfs)
                (text-layer)
                (text-width (text-width text font fontsize))
                ;;;
                (text2-width (car (text-wh text2 font fontsize)))
                (text2-height (elem 2 (text-wh text2 font fontsize)))
                ;;;
                (textfs-width)
                (textfs-height)
                (gradient-layer)
          )
          (gimp-image-insert-layer image layer 0 0)
          (gimp-context-set-foreground '(0 255 0))
          (gimp-drawable-fill layer FILL-FOREGROUND)
          (gimp-image-undo-disable image) 
          (gimp-context-set-foreground color)
          (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
          (gimp-image-insert-layer image textfs 0 -1)
          (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))   (/ height 2))
          (gimp-layer-resize-to-image-size textfs)
          (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
          (gimp-image-insert-layer image text-layer 0 -1)
          (gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
          (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
          (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
          (gimp-image-insert-layer image text-layer 0 -1)
          (gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
          (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
          (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
          (gimp-image-insert-layer image text-layer 0 -1)
          (gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
          (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
          (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
          (gimp-image-insert-layer image text-layer 0 -1)
          (gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
          (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
          (plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
          (set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
          (set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
        (gimp-layer-resize-to-image-size textfs)
          (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
                (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
        (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
          (gimp-context-set-brush-size 22)
          (gimp-edit-stroke textfs)
          (set! textfs-width (- textfs-width 70))
          (set! textfs-height (- textfs-height 70))
          (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
                (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
        (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
          (gimp-context-set-brush-size 8)
          (gimp-edit-stroke textfs)
          (set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))      
          (gimp-image-insert-layer image gradient-layer 0 -1)
        (gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
        (gimp-context-set-gradient gradient) 
        (gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
        REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
        (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
          (set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
          (gimp-image-insert-layer image textfs 0 -1)
          (gimp-message (number->string text2-height))
          (gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
          ;(gimp-selection-none image)
          ;(gimp-image-flatten image)
          (gimp-display-new image)
          (gimp-image-clean-all image)
          )
    )
    ;(script-fu-bhax-mandala "Bátfai Norbert" "BHAX" "Ruge Boogie" 120 1920 1080 '(255 0 0) "Shadows 3")
    (script-fu-register "script-fu-bhax-mandala"
          "Mandala9"
          "Creates a mandala from a text box."
          "Norbert Bátfai"
          "Copyright 2019, Norbert Bátfai"
          "January 9, 2019"
          ""
          SF-STRING           "Text"         "Bátf41 Haxor"
          SF-STRING           "Text2"        "BHAX"
          SF-FONT              "Font"         "Sans"
          SF-ADJUSTMENT     "Font size" '(100 1 1000 1 10 0 1)
          SF-VALUE            "Width"        "1000"
          SF-VALUE            "Height"      "1000"
          SF-COLOR            "Color"        '(255 0 0)
          SF-GRADIENT        "Gradient"   "Deep Sea"
    )
    (script-fu-menu-register "script-fu-bhax-mandala" 
          "<Image>/File/Create/BHAX"
    )
        ]]>
	</programlisting>
</section>
<section>
	<title>Allokátorok</title>
        <para>
Az allokátorok a C ++ szabvány könyvtár egyik alkotóeleme, és szerepet játszanak
tárolók méretének módosítására a program futásakor. Ők felelősek
a memória és a tárolási kérelmek elosztása érdekében az összes tárolás
kezésére. A C ++ szabvány könyvtár általános célú disztribútorokat tartalmaz, ezt vesszük alapértelmezettnek, de természetesen a programozó létrehozhat egyéni egyet, ezt fogjuk tenni a jelenlegi feladatunk során. Leginkább kicsi programokhoz használják őket
memóriamennyiség csökkentésére. Az allokátorok a futási idő és a memória lábnyoma csökkentése szempontjából szintén hasznosak.
	</para>
<para>
Az allokátor az alacsony szintű memóriaműveletekkel kapcsolatos összes részletet kezeli, de néhány metainformációt is megad arról, hogy milyen típusú szervezetet kezel. Az új (new) és törölj (delete) operátorokat használja a memória megszerzéséhez és felszabadításához.
</para>
<para><programlisting><![CDATA[ int[][] dataMatrix = new int[matrix.length][matrix.length];]]></programlisting></para>
<para>
A kódcsipet példa egy mátrix adatainak a memóriában való lefoglalására, elemei int típusuak és a mátrix mérete változó.
</para>
<para>Ne felejtsük el a lefoglalt memóriát felszabadítani amennyiben már nincs rá szükség!
</para>
</section>
<section><title>STL</title>
        <para>Az STL-lel, vagyis a Standard Template Library egy C++ sablonosztály, ami általános programozási adatszerkezeteket és funkciókat biztosít. Listákat, tömböket. Egy általánosított könyvtár, komponensei paramétereket használnak. A négy elemből áll: algoritmusok, konténerek/tárolók, függvények és iterátorok. </para>
<para>Az algoritmusok meghatározzák azokat a funkció gyűjteményeket, amiket direkt az elemtartományokhoz való felhasználásra terveztek. A funkciók lehetővé teszik a kódrészlet működését az átadott paraméterek segítségével. Az iterátorokat az értékek sorozatainak feldolgozására használhatjuk.
</para>
<para>A konténereknek főbb típusai: szekveniatartományok, konténer-adapterek, asszociatív konténerek és rendezetlen társító konténerek.</para>
<para>A map egy asszociatív konténer.</para>
<para>Térképszerűen, növekvő sorrendben rendezve tárolja az elemeket. Adatpárokat és kulcsokat (<code>std::pair&lt;>)</code> tárol, melyek paraméterek. </para>
</section>
<section>
    <title>Prolog Családfa</title>
    <para>
        A prolog egy elsőrendű logikára épülő deklaratív nyelv, mellyel elsősorban formulák igazságértékét   tudjuk vizsgálni. A nyelv lehetőséget ad arra, hogy egy relációhalmazt adjuk meg elemek között és az ezekre vonatkozó függvényeket kiértékeljük. Egy általános példa erre egy családfán belüli relációhalmaz létrehozása. Képesek vagyunk változókat deklarálni és megadni a köztük levő kapcsolatot, és a kapcsolatokat egy komplexebb kapcsolathalmazba is beépíthetjük. Az elsőrendű logika paradigmái közül minden általánosan használt kifejezés alkalmazható, vagy létrehozható, tehát tudunk negációt, konjunkciót, diszjunkciót, és kvantorokat is megadni az adott formulákra. Lehetőségünk van továbbá arra is, hogy kiértékeljük a formulákat minden lehetséges interpretációban. Az alábbi kódcsipet egy progol script-ből származik, mely egy családfát deklarál és egy pár benne levő kapcsolatot:
    </para>
    <para>
        <programlisting>
            <![CDATA[ 
szuloje('Ádám','Béla').
szuloje('Éva','Béla').
szuloje('Ádám','Irén').
szuloje('Éva','Irén').
szuloje('Irén','Dávid').
szuloje('Károly','Irén').
szuloje('Dávid','Katalin').

ferfiak(['Ádám','Béla']).
holgyek(['Irén','Éva']).

ferfi(X) :- ferfiak(T),eleme(X,T).
holgy(X) :- holgyek(T),eleme(X,T).

eleme(X,[X|_]).

eleme(X,[_|L]) :-
eleme(X,L).

apja(X,Y) :- ferfi(X),szuloje(X,Y).
anyja(X,Y) :- holgy(X),szuloje(X,Y).

testvere(X,Y) :- szuloje(Z,X),szuloje(Z,Y).

nagyapja(X,Y) :- szuloje(X,Z),szuloje(Z,Y),ferfi(X).

felmenoje(X,Y) :- szuloje(X,Y);szuloje(Z,Y),felmenoje(X,Z).
            ]]>
        </programlisting>
    </para>
    <para>
        Ha egy hasonló kapcsolathalmazt szeretnénk implementálni Javában, ahhoz a JPL könyvtárat tudjuk használni. Ennek a segítségével a java nyelv szintaxisában fogunk tudni prolog lekérdezéseket végrehajtani.
    </para>
</section>
</chapter>
